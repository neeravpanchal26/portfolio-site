{"ast":null,"code":"const data = require('./build/data.json');\n\nconst objectAssign = require('object-assign');\n\nfor (const key of Object.keys(data)) {\n  // Returns a string representation of html attributes\n  const htmlAttributes = (icon, options) => {\n    const attributes = [];\n    const attrObj = objectAssign({}, data[key].options, options); // If the user passed in options\n\n    if (options) {\n      // If any of the width or height is passed in\n      if (options['width'] || options['height']) {\n        attrObj['width'] = options['width'] ? options['width'] : parseInt(options['height']) * data[key].options['width'] / data[key].options['height'];\n        attrObj['height'] = options['height'] ? options['height'] : parseInt(options['width']) * data[key].options['height'] / data[key].options['width'];\n      } // If the user passed in class\n\n\n      if (options['class']) {\n        attrObj['class'] = `octicon octicon-${key} ${options['class']}`;\n        attrObj['class'].trim();\n      } // If the user passed in aria-label\n\n\n      if (options['aria-label']) {\n        attrObj['aria-label'] = options['aria-label'];\n        attrObj['role'] = 'img'; // Un-hide the icon\n\n        delete attrObj['aria-hidden'];\n      }\n    }\n\n    for (const option of Object.keys(attrObj)) {\n      attributes.push(`${option}=\"${attrObj[option]}\"`);\n    }\n\n    return attributes.join(' ').trim();\n  }; // Set the symbol for easy access\n\n\n  data[key].symbol = key; // Set all the default options\n\n  data[key].options = {\n    version: '1.1',\n    width: data[key].width,\n    height: data[key].height,\n    viewBox: `0 0 ${data[key].width} ${data[key].height}`,\n    class: `octicon octicon-${key}`,\n    'aria-hidden': 'true'\n  }; // Function to return an SVG object\n\n  data[key].toSVG = function (options) {\n    return `<svg ${htmlAttributes(data[key], options)}>${data[key].path}</svg>`;\n  };\n} // Import data into exports\n\n\nmodule.exports = data;","map":{"version":3,"sources":["/Volumes/STORAGE/GitHub/portfolio-site/node_modules/@primer/octicons/index.js"],"names":["data","require","objectAssign","key","Object","keys","htmlAttributes","icon","options","attributes","attrObj","parseInt","trim","option","push","join","symbol","version","width","height","viewBox","class","toSVG","path","module","exports"],"mappings":"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","sourcesContent":["const data = require('./build/data.json')\nconst objectAssign = require('object-assign')\n\nfor (const key of Object.keys(data)) {\n  // Returns a string representation of html attributes\n  const htmlAttributes = (icon, options) => {\n    const attributes = []\n    const attrObj = objectAssign({}, data[key].options, options)\n\n    // If the user passed in options\n    if (options) {\n      // If any of the width or height is passed in\n      if (options['width'] || options['height']) {\n        attrObj['width'] = options['width']\n          ? options['width']\n          : (parseInt(options['height']) * data[key].options['width']) / data[key].options['height']\n        attrObj['height'] = options['height']\n          ? options['height']\n          : (parseInt(options['width']) * data[key].options['height']) / data[key].options['width']\n      }\n\n      // If the user passed in class\n      if (options['class']) {\n        attrObj['class'] = `octicon octicon-${key} ${options['class']}`\n        attrObj['class'].trim()\n      }\n\n      // If the user passed in aria-label\n      if (options['aria-label']) {\n        attrObj['aria-label'] = options['aria-label']\n        attrObj['role'] = 'img'\n\n        // Un-hide the icon\n        delete attrObj['aria-hidden']\n      }\n    }\n\n    for (const option of Object.keys(attrObj)) {\n      attributes.push(`${option}=\"${attrObj[option]}\"`)\n    }\n\n    return attributes.join(' ').trim()\n  }\n\n  // Set the symbol for easy access\n  data[key].symbol = key\n\n  // Set all the default options\n  data[key].options = {\n    version: '1.1',\n    width: data[key].width,\n    height: data[key].height,\n    viewBox: `0 0 ${data[key].width} ${data[key].height}`,\n    class: `octicon octicon-${key}`,\n    'aria-hidden': 'true'\n  }\n\n  // Function to return an SVG object\n  data[key].toSVG = function(options) {\n    return `<svg ${htmlAttributes(data[key], options)}>${data[key].path}</svg>`\n  }\n}\n\n// Import data into exports\nmodule.exports = data\n"]},"metadata":{},"sourceType":"script"}